# Fichero de playbook
--- # Crear un nuevo play
# Contra quién opero
- hosts: all

  #Opciones de conexión
  remote_user: root
  order: inventory # podría poner reverse_inventory | sorted (orden alfabético) | reverse_sorted | shuffle
  # Ansible ejecuta los tasks de manera secuencial pero en paralelo sobre diferentes entornos
  # Por defecto, de 5 en 5
    
  # Variables
  vars:
    variable1: Hola amigo!!
    variable2: 22
    variable3:
        subvalor1: 1
        subvalor2: 2
        
  #En formato JSON (como, por ejemplo el ansible_facts) las llaves indican un diccionario y los corchetes una lista
    
  # Comienza la definición de tareas
  tasks:
        #Comienza UNA tarea
        - name: Mi primera tarea
          debug:
          # Si quiero usar variables, uso doble llave y el texto entre comillas (gracias a jinja2: motor para procesar todo lo que va entre llaves)
            msg: '{{variable1}}' # Hola, voy a comenzar una tarea
            
        #Comienza OTRA tarea
        - name: Mi segunda tarea
          debug:
          # !unsafe evita que el texto se procese por jinja
            msg: !unsafe 'En ninja va todo con dobles llaves {{aquí va mi variable}}' 
            
        #Comienza OTRA tarea
        - name: Mi tercera tarea
          debug:
          # !unsafe evita que el texto se procese por jinja
            msg: '{{variable1}} voy a comenzar la tarea {{numerotarea}} en el servidor {{sistema}} {{sistema2}}'
          # Puedo definir variables a nivel de tarea
          vars:
            numerotarea: 3
            
        #Comienza OTRA tarea
        - name: Mi cuarta tarea
          debug:
            msg: 'Valores del diccionario {{variable3.subvalor2}}' 
            
        #Comienza una tarea para obteber los facts
        - name: Mi tarea de facts
          debug:
            ## msg: '{{ansible_facts}}' si pongo var (que es un parámetro de msg, no hace falta {{}})
            var: ansible_facts.dns.nameservers[0]
            
        #Mi primera tarea CONDICIONAL
        - name: Mi tarea condicional
          debug:
            msg: 'He entrado!!!'
      ##  when: ansible_facts.distribution == 'Ubuntu' and variable2 == 22
          #Lo mismo con otra sintaxis
          when: ## Esta sintaxis es una AND encubierto
            - ansible_facts.distribution == 'Ubuntu' 
            - variable2 == 22
            
        #Una tarea normalita
        - name: Mi tarea normalita
          debug:
            msg: 'Me ejecuto normalmente'
          changed_when: False
          notify: Tarea opcional 1 #Nombre de la tarea que se va a ejecutar
          
        #Una tarea normalita
        - name: Mi tarea normalita
          debug:
            msg: 'Me ejecuto normalmente'
          changed_when: True
          ##notify: Tarea opcional 2 #Nombre de la tarea que se va a ejecutar    
          notify: mievento #un evento. La condicionales se apuntan a este evento para ejecutarse 
  
  
  
  #Al final del fichero
  handlers:
        #Una tarea opcional
        - name: Tarea opcional 1
          debug:
            msg: 'Me ejecuto opcionalmente 1'
          listen: mievento
          
        #Una tarea opcional
        - name: Tarea opcional 2
          debug:
            msg: 'Me ejecuto opcionalmente 2'
          listen: mievento